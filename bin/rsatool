import argparse, json, os
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
from rsatool import *


'''*************************************************************************
    Auxiliary
*************************************************************************'''

def autoInt(n):
    res = n.split(',')
    if len(res)==1:
        return int(res[0], 0)
    else:
        return [int(x, 0) for x in res]


def decrypt(attack):
    if args.c:
        key = RSA.construct((args.n, long(args.e), attack.d, attack.p, attack.q))
        if args.padding:
            key = PKCS1_OAEP.new(key)

        m = pow(args.c, attack.d, args.n)
        print('p = {}'.format(attack.p))
        print('q = {}'.format(attack.q))
        print('d = {}'.format(attack.d))
        print('m = {}'.format(m))
        try:
            print(str(hex(int(m)))[2:].replace('L', '').decode('hex'))
        except:
            pass
    else:
        print('p = {}'.format(attack.p))
        print('q = {}'.format(attack.q))
        print('d = {}'.format(attack.d))


if __name__ == '__main__':
    '''*************************************************************************
        Arguments and settings
    *************************************************************************'''
    parser = argparse.ArgumentParser()
    parser.add_argument('-t', dest='technique', choices=[
        'inverse',
        'wiener',
        'fermat',
        'factor',
        'hastad',
        'chosen'
    ], help='Attack technique')
    parser.add_argument('-d', dest='d', help='Private exponent', type=autoInt)
    parser.add_argument('-e', dest='e', default=3, help='Public exponent', type=autoInt)
    parser.add_argument('-p', dest='p', help='Prime number p', type=autoInt)
    parser.add_argument('-q', dest='q', help='Prime number q', type=autoInt)
    parser.add_argument('-n', dest='n', help='Modulos (n = p * q)', type=autoInt)
    parser.add_argument('-c', dest='c', help='Cipher text', type=autoInt)
    parser.add_argument('-f', dest='f', help='A factor used in chosen cipher text', type=autoInt)
    parser.add_argument('-plain', dest='plain', help='The plain text decrypted from the chosen cipher', type=autoInt)
    parser.add_argument('-pem', dest='pem', help='Read pubkey.pem file')
    parser.add_argument('-raw', dest='raw', help='Read cipher.raw file')
    parser.add_argument('-padding', dest='padding', help='Use padding', action='store_true')
    args = parser.parse_args()

    if args.pem:
        assert os.path.isfile(args.pem)
        with open(args.pem) as f:
            key = RSA.importKey(f.read())
            args.e = key.e
            args.n = key.n

    if args.raw:
        assert os.path.isfile(args.raw)
        with open(args.raw) as f:
            args.c = f.read()

    if args.p and args.q:
        args.n = args.p * args.q

    print(args)


    '''*************************************************************************
        Crack
    *************************************************************************'''
    cracked = False


    if args.c and args.d and args.n:
        cracked = True
        print ('%x' % pow(args.c, args.d, args.n)).decode('hex')

    elif not args.technique:
        print('[+] Trying Multiplicative Inverse attack')
        attack = Inverse(args.p, args.q, args.e)
        if attack.crack():
            cracked = True
        else:        
            print('[+] Trying Weiner attack')
            attack = Wiener(args.n, args.e)
            if attack.crack():
                cracked = True
            else:
                print('[+] Trying Fermat attack')
                attack = Fermat(args.n, args.e)
                if attack.crack():
                    cracked = True
                else:
                    print('[+] Trying Factorization attack')
                    attack = Factorization(args.n, args.e)
                    if attack.crack():
                        cracked = True
        if cracked:
            decrypt(attack)

    
    elif args.technique == 'inverse':
        attack = Inverse(args.p, args.q, args.e)
        if attack.crack():
            cracked = True
            decrypt(attack)

    elif args.technique == 'wiener':
        attack = Wiener(args.n, args.e)
        if attack.crack():
            cracked = True
            decrypt(attack)

    elif args.technique == 'fermat':
        attack = Fermat(args.n, args.e)
        if attack.crack():
            cracked = True
            decrypt(attack)

    elif args.technique == 'factor':
        attack = Factorization(args.n, args.e)
        if attack.crack():
            cracked = True
            decrypt(attack)

    elif args.technique == 'hastad':
        attack = Hastad(args.n, args.e, args.c)
        if attack.crack():
            cracked = True
            print attack.plain

    elif args.technique == 'chosen':
        assert args.c and args.f and args.plain
        attack = ChosenCipher(args.n, args.e, args.c)
        if attack.crack(args.f, args.plain):
            cracked = True
            print attack.plain


    if not cracked:
        print '[-] Attack failed.'